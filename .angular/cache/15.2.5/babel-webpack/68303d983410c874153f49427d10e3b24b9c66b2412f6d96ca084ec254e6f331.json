{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/clients.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nexport class ClientRegisterUpdateComponent {\n  constructor(clientsService, route, router) {\n    this.clientsService = clientsService;\n    this.route = route;\n    this.router = router;\n    this.clienteForm = new FormGroup({\n      cpf: new FormControl('', Validators.required),\n      nome: new FormControl('', Validators.required),\n      telefone: new FormControl(11111111111, Validators.required),\n      logradouro: new FormControl('', Validators.required),\n      complemento: new FormControl('', Validators.required),\n      cep: new FormControl('', Validators.required),\n      rendimentoMensal: new FormControl(0, Validators.required)\n    });\n    this.cpfCliente = '';\n  }\n  ngOnInit() {\n    this.cpfCliente = String(this.route.snapshot.paramMap.get('id'));\n    if (this.cpfCliente !== 'null') {\n      this.clientsService.findClientByCpf(this.cpfCliente).subscribe(cliente => {\n        this.clienteForm.setValue({\n          cpf: cliente.cpf,\n          nome: cliente.nome,\n          telefone: cliente.telefone,\n          logradouro: cliente.logradouro,\n          complemento: cliente.complemento,\n          cep: cliente.cep,\n          rendimentoMensal: cliente.rendimentoMensal\n        });\n      });\n    }\n  }\n  onSubmit() {\n    if (this.cpfCliente !== 'null') {\n      this.editar();\n    } else {\n      this.cadastrar();\n    }\n  }\n  cadastrar() {\n    const client = this.clienteForm.value;\n    this.clientsService.registerClient(client).subscribe(result => {\n      Swal.fire('Tudo certo!', 'Cadastro realizado com sucesso!', 'success');\n      this.clienteForm.setValue({\n        cpf: '',\n        nome: '',\n        telefone: null,\n        logradouro: '',\n        complemento: '',\n        cep: '',\n        rendimentoMensal: 0\n      });\n    }, error => {\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: 'Algo deu errado! Verifique o erro no console (Ou no Back End).'\n      });\n      console.error(error);\n    });\n  }\n  editar() {\n    const cliente = this.clienteForm.value;\n    this.clientsService.updateClient(cliente).subscribe(result => {\n      Swal.fire('Tudo certo!', 'Edição realizada com sucesso!', 'success');\n      this.router.navigate(['/clientes']);\n    }, error => {\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: 'Algo deu errado! Verifique o erro no console (Ou no Back End).'\n      });\n      console.error(error);\n    });\n  }\n}\nClientRegisterUpdateComponent.ɵfac = function ClientRegisterUpdateComponent_Factory(t) {\n  return new (t || ClientRegisterUpdateComponent)(i0.ɵɵdirectiveInject(i1.ClientsService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n};\nClientRegisterUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ClientRegisterUpdateComponent,\n  selectors: [[\"app-client-register-update\"]],\n  decls: 41,\n  vars: 6,\n  consts: [[1, \"display-6\"], [1, \"container-fluid\"], [\"action\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"row\"], [1, \"col-3\"], [1, \"mb-3\"], [\"for\", \"cpf\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"cpf\", \"formControlName\", \"cpf\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"logradouro\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"logradouro\", \"formControlName\", \"logradouro\", 1, \"form-control\"], [\"for\", \"renda\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"renda\", \"formControlName\", \"renda\", 1, \"form-control\"], [\"for\", \"nome\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"nome\", \"formControlName\", \"nome\", 1, \"form-control\"], [\"for\", \"Complemento\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"Complemento\", 1, \"form-control\"], [\"for\", \"telefone\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"telefone\", \"formControlName\", \"telefone\", 1, \"form-control\"], [\"for\", \"cep\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"cep\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"]],\n  template: function ClientRegisterUpdateComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\");\n      i0.ɵɵtext(3);\n      i0.ɵɵpipe(4, \"json\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 1)(6, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function ClientRegisterUpdateComponent_Template_form_ngSubmit_6_listener() {\n        return ctx.cadastrar();\n      });\n      i0.ɵɵelementStart(7, \"div\", 3)(8, \"div\", 4)(9, \"div\", 5)(10, \"label\", 6);\n      i0.ɵɵtext(11, \"CPF\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 5)(14, \"label\", 8);\n      i0.ɵɵtext(15, \"Logradouro\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"div\", 5)(18, \"label\", 10);\n      i0.ɵɵtext(19, \"Renda Mensal\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"input\", 11);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(21, \"div\", 4)(22, \"div\", 5)(23, \"label\", 12);\n      i0.ɵɵtext(24, \"Nome\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(25, \"input\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"div\", 5)(27, \"label\", 14);\n      i0.ɵɵtext(28, \"Complemento\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(29, \"input\", 15);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(30, \"div\", 4)(31, \"div\", 5)(32, \"label\", 16);\n      i0.ɵɵtext(33, \"Telefone\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(34, \"input\", 17);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(35, \"div\", 5)(36, \"label\", 18);\n      i0.ɵɵtext(37, \"CEP\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(38, \"input\", 19);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(39, \"button\", 20);\n      i0.ɵɵtext(40, \"Submit\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.clientCpf ? \"Atualizar Cadastro\" : \"Cadastrar\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 4, ctx.registerForm.value));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(33);\n      i0.ɵɵproperty(\"disabled\", !ctx.registerForm.valid);\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.FormGroupDirective, i3.FormControlName, i4.JsonPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","Swal","ClientRegisterUpdateComponent","constructor","clientsService","route","router","cpf","required","nome","telefone","logradouro","complemento","cep","rendimentoMensal","ngOnInit","cpfCliente","String","snapshot","paramMap","get","findClientByCpf","subscribe","cliente","clienteForm","setValue","onSubmit","editar","cadastrar","client","value","registerClient","result","fire","error","icon","title","text","console","updateClient","navigate","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\emprestimo-front\\emprestimo-front\\src\\app\\pages\\client-register-update\\client-register-update.component.ts","C:\\emprestimo-front\\emprestimo-front\\src\\app\\pages\\client-register-update\\client-register-update.component.html"],"sourcesContent":["// import { HttpHeaderResponse } from '@angular/common/http';\n// import { Component } from '@angular/core';\n// import { FormControl, FormGroup, Validators } from '@angular/forms';\n// import { ActivatedRoute } from '@angular/router';\n// import { IClient } from 'src/app/interfaces/client';\n// import { AlertsService } from 'src/app/services/alerts.service';\n// import { ClientsService } from 'src/app/services/clients.service';\n// import Swal from 'sweetalert2';\n\n// @Component({\n//   selector: 'app-client-register-update',\n//   templateUrl: './client-register-update.component.html',\n//   styleUrls: ['./client-register-update.component.css'],\n// })\n// export class ClientRegisterUpdateComponent {\n//   registerForm = new FormGroup({\n//     cpf: new FormControl('', Validators.required),\n//     nome: new FormControl('', Validators.required),\n//     telefone: new FormControl(0, Validators.required),\n//     logradouro: new FormControl('', Validators.required),\n//     complemento: new FormControl('', Validators.required),\n//     cep: new FormControl('', Validators.required),\n//     rendimentoMensal: new FormControl(0, Validators.required),\n//   });\n\n//   constructor(\n//     private clientsService: ClientsService,\n//     private route: ActivatedRoute,\n//     private alertsService: AlertsService\n//   ) {}\n//   clientCpf = '';\n\n//   ngOnInit() {\n//     this.clientCpf = String(this.route.snapshot.paramMap.get('cpf'));\n//     if (this.clientCpf) {\n//       this.clientsService\n//         .findClientByCpf(this.clientCpf)\n//         .subscribe((client: IClient) => {\n//           this.registerForm.setValue({\n//             cpf: client.cpf,\n//             nome: client.nome,\n//             telefone: client.telefone,\n//             logradouro: client.logradouro,\n//             complemento: client.complemento,\n//             cep: client.cep,\n//             rendimentoMensal: client.rendimentoMensal,\n//           });\n//         });\n//     }\n//   }\n\n//   onSubmit() {\n//     if (this.clientCpf) {\n//       this.atualizar();\n//     } else {\n//       this.cadastrar();\n//     }\n//   }\n\n//   cadastrar() {\n//     const client: IClient = this.registerForm.value as IClient;\n//     this.clientsService.registerClient(client).subscribe(\n//       (result) => {\n//         this.alertsService.alertSuccess('Cliente cadastrado com sucesso!');\n//       },\n//       (error) => {\n//         console.error();\n//       }\n//     );\n//   }\n\n//   atualizar() {\n//     const client: IClient = this.registerForm.value as IClient;\n//     this.clientsService.updateClient(client).subscribe(\n//       (result) => {\n//         Swal.fire({\n//           title: 'Cliente atualizado com sucesso',\n//           icon: 'success',\n//           confirmButtonText: 'Ok',\n//         });\n//       },\n//       (error) => {\n//         Swal.fire({\n//           icon: 'error',\n//           title: 'Oops...',\n//           text: 'Algo deu errado! Verifique o erro no console.',\n//         });\n//         console.error(error);\n//       }\n//     );\n//   }\n// }\n\n\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { IClient } from 'src/app/interfaces/client';\nimport { ClientsService } from 'src/app/services/clients.service';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-client-register-update',\n  templateUrl: './client-register-update.component.html',\n  styleUrls: ['./client-register-update.component.css'],\n})\n\nexport class ClientRegisterUpdateComponent {\n\n  clienteForm = new FormGroup({\n    cpf: new FormControl('', Validators.required),\n    nome: new FormControl('', Validators.required),\n    telefone: new FormControl(11111111111, Validators.required),\n    logradouro: new FormControl('', Validators.required),\n    complemento: new FormControl('', Validators.required),\n    cep: new FormControl('', Validators.required),\n    rendimentoMensal: new FormControl(0, Validators.required)\n  })\n\n  constructor(private clientsService: ClientsService, private route: ActivatedRoute, private router: Router) {}\n\n  cpfCliente = '';\n  ngOnInit() {\n    this.cpfCliente = String(this.route.snapshot.paramMap.get('id'));\n\n    if((this.cpfCliente !== 'null')) {\n      this.clientsService.findClientByCpf(this.cpfCliente).subscribe((cliente: IClient) => {\n          this.clienteForm.setValue({\n              cpf: cliente.cpf,\n              nome: cliente.nome,\n              telefone: cliente.telefone,\n              logradouro: cliente.logradouro,\n              complemento: cliente.complemento,\n              cep: cliente.cep,\n              rendimentoMensal: cliente.rendimentoMensal\n          })\n      });\n    }\n\n  }\n\n  onSubmit() {\n    if(this.cpfCliente !== 'null') {\n      this.editar();\n    } else {\n      this.cadastrar();\n    }\n  }\n\n  cadastrar() {\n    const client: IClient = this.clienteForm.value as IClient;\n    this.clientsService.registerClient(client).subscribe(result => {\n        Swal.fire(\n          'Tudo certo!',\n          'Cadastro realizado com sucesso!',\n          'success'\n        );\n        this.clienteForm.setValue({\n          cpf: '',\n          nome: '',\n          telefone: null,\n            logradouro: '',\n            complemento: '',\n            cep: '',\n          rendimentoMensal: 0\n        })\n    }, error => {\n        Swal.fire({\n          icon: 'error',\n          title: 'Oops...',\n          text: 'Algo deu errado! Verifique o erro no console (Ou no Back End).'\n        })\n        console.error(error);\n    })\n  }\n\n  editar() {\n    const cliente: IClient = this.clienteForm.value as IClient;\n    this.clientsService.updateClient(cliente).subscribe(result => {\n        Swal.fire(\n          'Tudo certo!',\n          'Edição realizada com sucesso!',\n          'success'\n        );\n        this.router.navigate(['/clientes']);\n    }, error => {\n        Swal.fire({\n          icon: 'error',\n          title: 'Oops...',\n          text: 'Algo deu errado! Verifique o erro no console (Ou no Back End).'\n        })\n        console.error(error);\n    })\n  }\n}\n","\n<h1 class=\"display-6\">{{ clientCpf ? 'Atualizar Cadastro' : 'Cadastrar'}}</h1>\n<div>{{registerForm.value | json}}</div>\n<div class=\"container-fluid\">\n  <form [formGroup]=\"registerForm\" (ngSubmit)=\"cadastrar()\" action=\"\">\n    <div class=\"row\">\n      <div class=\"col-3\">\n        <div class=\"mb-3\">\n          <label for=\"cpf\" class=\"form-label\">CPF</label>\n          <input type=\"text\" class=\"form-control\" id=\"cpf\" formControlName=\"cpf\" required/>\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"logradouro\" class=\"form-label\">Logradouro</label>\n          <input type=\"text\" class=\"form-control\" id=\"logradouro\" formControlName=\"logradouro\"/>\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"renda\" class=\"form-label\">Renda Mensal</label>\n          <input type=\"number\" class=\"form-control\" id=\"renda\" formControlName=\"renda\" />\n        </div>\n      </div>\n      <div class=\"col-3\">\n        <div class=\"mb-3\">\n          <label for=\"nome\" class=\"form-label\">Nome</label>\n          <input type=\"text\" class=\"form-control\" id=\"nome\" formControlName=\"nome\"/>\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"Complemento\" class=\"form-label\">Complemento</label>\n          <input type=\"text\" class=\"form-control\" id=\"Complemento\"/>\n        </div>\n      </div>\n      <div class=\"col-3\">\n        <div class=\"mb-3\">\n          <label for=\"telefone\" class=\"form-label\">Telefone</label>\n          <input type=\"number\" class=\"form-control\" id=\"telefone\" formControlName=\"telefone\"/>\n        </div>\n        <div class=\"mb-3\">\n          <label for=\"cep\" class=\"form-label\">CEP</label>\n          <input type=\"text\" class=\"form-control\" id=\"cep\"/>\n        </div>\n      </div>\n    </div>\n    <button type=\"submit\" [disabled]=\"!registerForm.valid\" class=\"btn btn-primary\">Submit</button>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}