{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nlet ClientRegisterUpdateComponent = class ClientRegisterUpdateComponent {\n  constructor(clientsService, route, alertsService) {\n    this.clientsService = clientsService;\n    this.route = route;\n    this.alertsService = alertsService;\n    this.registerForm = new FormGroup({\n      cpf: new FormControl('', Validators.required),\n      nome: new FormControl('', Validators.required),\n      telefone: new FormControl(0, Validators.required),\n      logradouro: new FormControl('', Validators.required),\n      complemento: new FormControl('', Validators.required),\n      cep: new FormControl('', Validators.required),\n      rendimentoMensal: new FormControl(0, Validators.required)\n    });\n    this.clientCpf = '';\n  }\n  ngOnInit() {\n    this.clientCpf = String(this.route.snapshot.paramMap.get('cpf'));\n    if (this.clientCpf && this.clientCpf !== '') {\n      this.clientsService.findClientByCpf(this.clientCpf).subscribe(client => {\n        this.registerForm.setValue({\n          cpf: client.cpf,\n          nome: client.nome,\n          telefone: client.telefone,\n          logradouro: client.logradouro,\n          complemento: client.complemento,\n          cep: client.cep,\n          rendimentoMensal: client.rendimentoMensal\n        });\n      });\n    }\n  }\n  onSubmit() {\n    if (this.clientCpf) {\n      this.atualizar();\n    } else {\n      this.cadastrar();\n    }\n  }\n  cadastrar() {\n    const client = this.registerForm.value;\n    this.clientsService.registerClient(client).subscribe(result => {\n      Swal.fire({\n        icon: 'success',\n        title: 'Cadastro realizado!'\n      }).then(retornar => {\n        window.open(\"http://localhost:4200/clientes\", \"_self\");\n      });\n    }, error => {\n      console.error();\n    });\n  }\n  atualizar() {\n    const client = this.registerForm.value;\n    this.clientsService.updateClient(client, this.clientCpf).subscribe(result => {\n      Swal.fire({\n        title: 'Cliente atualizado com sucesso',\n        icon: 'success',\n        confirmButtonText: 'Ok'\n      }).then(retornar => {\n        window.open(\"http://localhost:4200/clientes\", \"_self\");\n      });\n    }, error => {\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: 'Algo deu errado! Verifique o erro no console.'\n      });\n      console.error(error);\n    });\n  }\n};\nClientRegisterUpdateComponent = __decorate([Component({\n  selector: 'app-client-register-update',\n  templateUrl: './client-register-update.component.html',\n  styleUrls: ['./client-register-update.component.css']\n})], ClientRegisterUpdateComponent);\nexport { ClientRegisterUpdateComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","Swal","ClientRegisterUpdateComponent","constructor","clientsService","route","alertsService","cpf","required","nome","telefone","logradouro","complemento","cep","rendimentoMensal","ngOnInit","clientCpf","String","snapshot","paramMap","get","findClientByCpf","subscribe","client","registerForm","setValue","onSubmit","atualizar","cadastrar","value","registerClient","result","fire","icon","title","then","retornar","window","open","error","console","updateClient","confirmButtonText","text","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\emprestimo-front\\emprestimo-front\\src\\app\\pages\\client-register-update\\client-register-update.component.ts"],"sourcesContent":["import { HttpHeaderResponse } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { IClient } from 'src/app/interfaces/client';\nimport { AlertsService } from 'src/app/services/alerts.service';\nimport { ClientsService } from 'src/app/services/clients.service';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-client-register-update',\n  templateUrl: './client-register-update.component.html',\n  styleUrls: ['./client-register-update.component.css'],\n})\nexport class ClientRegisterUpdateComponent {\n  registerForm = new FormGroup({\n    cpf: new FormControl('', Validators.required),\n    nome: new FormControl('', Validators.required),\n    telefone: new FormControl(0, Validators.required),\n    logradouro: new FormControl('', Validators.required),\n    complemento: new FormControl('', Validators.required),\n    cep: new FormControl('', Validators.required),\n    rendimentoMensal: new FormControl(0, Validators.required),\n  });\n\n  constructor(\n    private clientsService: ClientsService,\n    private route: ActivatedRoute,\n    private alertsService: AlertsService\n  ) {}\n  clientCpf = '';\n\n  ngOnInit() {\n    this.clientCpf = String(this.route.snapshot.paramMap.get('cpf'));\n    if (this.clientCpf && this.clientCpf !== '') {\n      this.clientsService\n        .findClientByCpf(this.clientCpf)\n        .subscribe((client: IClient) => {\n          this.registerForm.setValue({\n            cpf: client.cpf,\n            nome: client.nome,\n            telefone: client.telefone,\n            logradouro: client.logradouro,\n            complemento: client.complemento,\n            cep: client.cep,\n            rendimentoMensal: client.rendimentoMensal,\n          });\n        });\n    }\n  }\n\n  onSubmit() {\n    if (this.clientCpf) {\n      this.atualizar();\n    } else {\n      this.cadastrar();\n    }\n  }\n\n  cadastrar() {\n    const client: IClient = this.registerForm.value as IClient;\n    this.clientsService.registerClient(client).subscribe(\n      (result) => {\n        Swal.fire({\n          icon: 'success',\n          title: 'Cadastro realizado!'\n        }).then((retornar) => {window.open(\"http://localhost:4200/clientes\", \"_self\")});\n      },\n      (error) => {\n        console.error();\n      }\n    );\n  }\n\n  atualizar() {\n    const client: IClient = this.registerForm.value as IClient;\n    this.clientsService.updateClient(client, this.clientCpf).subscribe(\n      (result) => {\n        Swal.fire({\n          title: 'Cliente atualizado com sucesso',\n          icon: 'success',\n          confirmButtonText: 'Ok'\n        }).then((retornar) => {window.open(\"http://localhost:4200/clientes\", \"_self\")});\n      },\n      (error) => {\n        Swal.fire({\n          icon: 'error',\n          title: 'Oops...',\n          text: 'Algo deu errado! Verifique o erro no console.',\n        });\n        console.error(error);\n      }\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}