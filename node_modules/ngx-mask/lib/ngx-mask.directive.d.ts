import { ControlValueAccessor, ValidationErrors, Validator, FormControl } from '@angular/forms';
import { OnChanges, SimpleChanges } from '@angular/core';
import { CustomKeyboardEvent } from './custom-keyboard-event';
import { IConfig } from './ngx-mask.config';
import { NgxMaskService } from './ngx-mask.service';
import * as i0 from "@angular/core";
export declare class NgxMaskDirective implements ControlValueAccessor, OnChanges, Validator {
    maskExpression: string | undefined | null;
    specialCharacters: IConfig['specialCharacters'];
    patterns: IConfig['patterns'];
    prefix: IConfig['prefix'];
    suffix: IConfig['suffix'];
    thousandSeparator: IConfig['thousandSeparator'];
    decimalMarker: IConfig['decimalMarker'];
    dropSpecialCharacters: IConfig['dropSpecialCharacters'] | null;
    hiddenInput: IConfig['hiddenInput'] | null;
    showMaskTyped: IConfig['showMaskTyped'] | null;
    placeHolderCharacter: IConfig['placeHolderCharacter'] | null;
    shownMaskExpression: IConfig['shownMaskExpression'] | null;
    showTemplate: IConfig['showTemplate'] | null;
    clearIfNotMatch: IConfig['clearIfNotMatch'] | null;
    validation: IConfig['validation'] | null;
    separatorLimit: IConfig['separatorLimit'] | null;
    allowNegativeNumbers: IConfig['allowNegativeNumbers'] | null;
    leadZeroDateTime: IConfig['leadZeroDateTime'] | null;
    triggerOnMaskChange: IConfig['triggerOnMaskChange'] | null;
    maskFilled: IConfig['maskFilled'];
    private _maskValue;
    private _inputValue;
    private _position;
    private _start;
    private _end;
    private _code;
    private _maskExpressionArray;
    private _justPasted;
    private readonly document;
    _maskService: NgxMaskService;
    protected _config: IConfig;
    onChange: (_: any) => void;
    onTouch: () => void;
    ngOnChanges(changes: SimpleChanges): void;
    validate({ value }: FormControl): ValidationErrors | null;
    onPaste(): void;
    onModelChange(value: string | undefined | null | number): void;
    onInput(e: CustomKeyboardEvent): void;
    onBlur(): void;
    onClick(e: MouseEvent | CustomKeyboardEvent): void;
    onKeyDown(e: CustomKeyboardEvent): void;
    /** It writes the value in the input */
    writeValue(inputValue: string | number | {
        value: string | number;
        disable?: boolean;
    }): Promise<void>;
    registerOnChange(fn: typeof this.onChange): void;
    registerOnTouched(fn: typeof this.onTouch): void;
    private _getActiveElement;
    checkSelectionOnDeletion(el: HTMLInputElement): void;
    /** It disables the input element */
    setDisabledState(isDisabled: boolean): void;
    private _repeatPatternSymbols;
    private _applyMask;
    private _validateTime;
    private _getActualInputLength;
    private _createValidationError;
    private _setMask;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxMaskDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgxMaskDirective, "input[mask], textarea[mask]", ["mask", "ngxMask"], { "maskExpression": "mask"; "specialCharacters": "specialCharacters"; "patterns": "patterns"; "prefix": "prefix"; "suffix": "suffix"; "thousandSeparator": "thousandSeparator"; "decimalMarker": "decimalMarker"; "dropSpecialCharacters": "dropSpecialCharacters"; "hiddenInput": "hiddenInput"; "showMaskTyped": "showMaskTyped"; "placeHolderCharacter": "placeHolderCharacter"; "shownMaskExpression": "shownMaskExpression"; "showTemplate": "showTemplate"; "clearIfNotMatch": "clearIfNotMatch"; "validation": "validation"; "separatorLimit": "separatorLimit"; "allowNegativeNumbers": "allowNegativeNumbers"; "leadZeroDateTime": "leadZeroDateTime"; "triggerOnMaskChange": "triggerOnMaskChange"; }, { "maskFilled": "maskFilled"; }, never, never, true, never>;
}
